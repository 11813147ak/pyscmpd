pyscmpd
========

(c) 2012 Stefan Wendler
sw@kaltpost.de
http://gpio.kaltpost.de/


Introduction
------------

Python based sound-cloud music server talking MPD protocol. This document
describes the basic idea behind the architecture of "pyscmpd".


Core Components and Layers
--------------------------

** Provider Agnostic 

+----------------------------------------------------------------------+
| player user interface                                                |
+----------------------------------------------------------------------+
+-----------------------------------------------------------+ +--------+
| player core                                               | |        |
+-----------------------------------------------------------+ |        |
+------------------------------------------------+ +--------+ | interf.|
| resource provider                              | |        | | prov.  |
+------------------------------------------------+ | phsy.  | |        |
+--------------------------+ +-------------------+ | sound  | |        |
| phys.  resource provider | | resource core     | | prov.  | |        |
+--------------------------+ +-------------------+ +--------+ +--------+


** Provider Aware

+----------------------------------------------------------------------+
| player user interface MPD protocol 0.12.0                            |
+----------------------------------------------------------------------+
+-----------------------------------------------------------+ +--------+
| gst player                                                | |        |
+-----------------------------------------------------------+ |        |
+------------------------------------------------+ +--------+ | python |
| resource provider sound cloud                  | |        | | mpd    |
+------------------------------------------------+ | python | | server |
+--------------------------+ +-------------------+ | gst    | | framwk.|
| soundcloud-pyhton API    | | resource core     | | API    | |        |
+--------------------------+ +-------------------+ +--------+ +--------+


Resource Core
-------------

Everything related to songs and managing songs is called a resource. The following resources are known:

                                     +----------+
                                     | Resource |
                                     +----------+
                                         /|\
                                          |
                                     +----+-----+
                                     |          |
                               +-----------+ +------+
                               | Directory | | File |
                               +-----------+ +------+

Resource are self aggregating: 


                                     +----------+
                                     | Resource |--+
                                     +----------+  |
                                          /|\      |
                                           +-------+


Thus, a browsable music hiarchie could be modeled. E.g. for soundcloud.com:

Resource (root)
|
+- Directoy (name given by user, e.g. "deephouse")
|  |
|  +- Directory (soundcloud user, e.g. "GRiZ")
|  |  |
|  |  +- File (soundcloud track, e.g. "Rock N Roll")
|  |  +- File (soundcloud track, e.g. "Too much trolling")
|  |  +- File (soundcloud track, e.g. "No way")
|  |
|  +- Directory (soundcloud user)
|     |
|     +- File (soundcloud track)
|
+- Directoy (name given by user, e.g. "electroswing")
   |
   +- Directory (soundcloud user)


Persistent Playlists
--------------------

The current playlist is persisted automatically whenever the daemon receives the TERM signal.

It is also possible to save the current playlist under a user defined name. However it is not
guarntied, that sound-cloud queries deliver the same resultis between two calls for the same 
resource. 

E.g. if you added some favorite group "A" which contains more then the maximum amount of users
the SoundCloud API is returning a more or less random set of users for that groups. 
If now one addes some tracks lets say from user "U" to a playlist, and then comes back the other 
day (starting the daemon freshly), it is very likely, that this time user "U" and its tracks are not 
returned by the API query. Since MPD clients like ncmpcpp try to add songs from a user defined 
playlist to the current playlist by using "addid" or "add" command, and supplying the path, 
the daemon fails to find that track again from the query. 

The workaround for this is, to put all tracks retrived from a playlist to a track cache. Since
a track from a playlist contains all information needed to show it or play it, including its
former path, every time the "addid" or "add" command is called, the daemon first looks if it
findes the requested path in the cache. If so, the cached information is used instead of 
querying it from SoundCloud. 

